/*
 * Payneteasy Android Transfer DAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.payneteasy.android.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TransferStatusResponse
 */

public class TransferStatusResponse {
  @SerializedName("bankOrderId")
  private String bankOrderId = null;

  @SerializedName("orderId")
  private String orderId = null;

  @SerializedName("invoiceId")
  private String invoiceId = null;

  @SerializedName("redirectUrl")
  private String redirectUrl = null;

  @SerializedName("session")
  private Session session = null;

  /**
   * The state of the transfer
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PROCESSING("PROCESSING"),
    
    REDIRECT_REQUEST("REDIRECT_REQUEST"),
    
    APPROVED("APPROVED"),
    
    DECLINED("DECLINED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("transaction")
  private Transaction transaction = null;

  @SerializedName("error")
  private Error error = null;

  @SerializedName("errorCode")
  private Integer errorCode = null;

  @SerializedName("errorMessage")
  private String errorMessage = null;

  /**
   * 3D authentication status
   */
  @JsonAdapter(Secure3DAuthStatusEnum.Adapter.class)
  public enum Secure3DAuthStatusEnum {
    AUTHENTICATED("AUTHENTICATED"),
    
    NOT_AUTHENTICATED("NOT_AUTHENTICATED"),
    
    UNSUPPORTED("UNSUPPORTED"),
    
    DECLINED("DECLINED");

    private String value;

    Secure3DAuthStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Secure3DAuthStatusEnum fromValue(String text) {
      for (Secure3DAuthStatusEnum b : Secure3DAuthStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Secure3DAuthStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Secure3DAuthStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Secure3DAuthStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Secure3DAuthStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("secure3DAuthStatus")
  private Secure3DAuthStatusEnum secure3DAuthStatus = null;

  /**
   * Random sum authentication status
   */
  @JsonAdapter(RandomSumAuthStatusEnum.Adapter.class)
  public enum RandomSumAuthStatusEnum {
    AUTHENTICATED("AUTHENTICATED"),
    
    NOT_AUTHENTICATED("NOT_AUTHENTICATED");

    private String value;

    RandomSumAuthStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RandomSumAuthStatusEnum fromValue(String text) {
      for (RandomSumAuthStatusEnum b : RandomSumAuthStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RandomSumAuthStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RandomSumAuthStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RandomSumAuthStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RandomSumAuthStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("randomSumAuthStatus")
  private RandomSumAuthStatusEnum randomSumAuthStatus = null;

  public TransferStatusResponse bankOrderId(String bankOrderId) {
    this.bankOrderId = bankOrderId;
    return this;
  }

   /**
   * Required if state is APPROVED or DECLINED
   * @return bankOrderId
  **/
  @ApiModelProperty(value = "Required if state is APPROVED or DECLINED")
  public String getBankOrderId() {
    return bankOrderId;
  }

  public void setBankOrderId(String bankOrderId) {
    this.bankOrderId = bankOrderId;
  }

  public TransferStatusResponse orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Order identifier in payment processing system
   * @return orderId
  **/
  @ApiModelProperty(value = "Order identifier in payment processing system")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public TransferStatusResponse invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

   /**
   * Transfer transaction identifier
   * @return invoiceId
  **/
  @ApiModelProperty(value = "Transfer transaction identifier")
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }

  public TransferStatusResponse redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * Required if state is REDIRECT_REQUEST
   * @return redirectUrl
  **/
  @ApiModelProperty(value = "Required if state is REDIRECT_REQUEST")
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public TransferStatusResponse session(Session session) {
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @ApiModelProperty(value = "")
  public Session getSession() {
    return session;
  }

  public void setSession(Session session) {
    this.session = session;
  }

  public TransferStatusResponse state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the transfer
   * @return state
  **/
  @ApiModelProperty(value = "The state of the transfer")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public TransferStatusResponse transaction(Transaction transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @ApiModelProperty(value = "")
  public Transaction getTransaction() {
    return transaction;
  }

  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }

  public TransferStatusResponse error(Error error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @ApiModelProperty(value = "")
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }

  public TransferStatusResponse errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Decline reason code, may present if state is DECLINED
   * @return errorCode
  **/
  @ApiModelProperty(value = "Decline reason code, may present if state is DECLINED")
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }

  public TransferStatusResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Decline reason message, may present if state is DECLINED
   * @return errorMessage
  **/
  @ApiModelProperty(value = "Decline reason message, may present if state is DECLINED")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public TransferStatusResponse secure3DAuthStatus(Secure3DAuthStatusEnum secure3DAuthStatus) {
    this.secure3DAuthStatus = secure3DAuthStatus;
    return this;
  }

   /**
   * 3D authentication status
   * @return secure3DAuthStatus
  **/
  @ApiModelProperty(value = "3D authentication status")
  public Secure3DAuthStatusEnum getSecure3DAuthStatus() {
    return secure3DAuthStatus;
  }

  public void setSecure3DAuthStatus(Secure3DAuthStatusEnum secure3DAuthStatus) {
    this.secure3DAuthStatus = secure3DAuthStatus;
  }

  public TransferStatusResponse randomSumAuthStatus(RandomSumAuthStatusEnum randomSumAuthStatus) {
    this.randomSumAuthStatus = randomSumAuthStatus;
    return this;
  }

   /**
   * Random sum authentication status
   * @return randomSumAuthStatus
  **/
  @ApiModelProperty(value = "Random sum authentication status")
  public RandomSumAuthStatusEnum getRandomSumAuthStatus() {
    return randomSumAuthStatus;
  }

  public void setRandomSumAuthStatus(RandomSumAuthStatusEnum randomSumAuthStatus) {
    this.randomSumAuthStatus = randomSumAuthStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferStatusResponse transferStatusResponse = (TransferStatusResponse) o;
    return Objects.equals(this.bankOrderId, transferStatusResponse.bankOrderId) &&
        Objects.equals(this.orderId, transferStatusResponse.orderId) &&
        Objects.equals(this.invoiceId, transferStatusResponse.invoiceId) &&
        Objects.equals(this.redirectUrl, transferStatusResponse.redirectUrl) &&
        Objects.equals(this.session, transferStatusResponse.session) &&
        Objects.equals(this.state, transferStatusResponse.state) &&
        Objects.equals(this.transaction, transferStatusResponse.transaction) &&
        Objects.equals(this.error, transferStatusResponse.error) &&
        Objects.equals(this.errorCode, transferStatusResponse.errorCode) &&
        Objects.equals(this.errorMessage, transferStatusResponse.errorMessage) &&
        Objects.equals(this.secure3DAuthStatus, transferStatusResponse.secure3DAuthStatus) &&
        Objects.equals(this.randomSumAuthStatus, transferStatusResponse.randomSumAuthStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankOrderId, orderId, invoiceId, redirectUrl, session, state, transaction, error, errorCode, errorMessage, secure3DAuthStatus, randomSumAuthStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferStatusResponse {\n");
    
    sb.append("    bankOrderId: ").append(toIndentedString(bankOrderId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    secure3DAuthStatus: ").append(toIndentedString(secure3DAuthStatus)).append("\n");
    sb.append("    randomSumAuthStatus: ").append(toIndentedString(randomSumAuthStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

