/*
 * Payneteasy Android Transfer DAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.payneteasy.android.api;

import com.payneteasy.android.ApiCallback;
import com.payneteasy.android.ApiClient;
import com.payneteasy.android.ApiException;
import com.payneteasy.android.ApiResponse;
import com.payneteasy.android.Configuration;
import com.payneteasy.android.Pair;
import com.payneteasy.android.ProgressRequestBody;
import com.payneteasy.android.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.payneteasy.android.model.AccessTokenResponse;
import com.payneteasy.android.model.CardsIdsRequest;
import com.payneteasy.android.model.CardsIdsResponse;
import com.payneteasy.android.model.InitiateTransferRequest;
import com.payneteasy.android.model.InitiateTransferResponse;
import com.payneteasy.android.model.PerformTransferRequest;
import com.payneteasy.android.model.PerformTransferResponse;
import com.payneteasy.android.model.RatesRequest;
import com.payneteasy.android.model.RatesResponse;
import com.payneteasy.android.model.SendFeedbackRequest;
import com.payneteasy.android.model.SendFeedbackResponse;
import com.payneteasy.android.model.TransferStatusRequest;
import com.payneteasy.android.model.TransferStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for authBankIdRequestAccessTokenGet
     * @param bankId Bank identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authBankIdRequestAccessTokenGetCall(String bankId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/auth/{bank_id}/request-access-token"
            .replaceAll("\\{" + "bank_id" + "\\}", apiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authBankIdRequestAccessTokenGetValidateBeforeCall(String bankId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling authBankIdRequestAccessTokenGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authBankIdRequestAccessTokenGetCall(bankId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generate access token for transfer operation
     * 
     * @param bankId Bank identifier (required)
     * @return AccessTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessTokenResponse authBankIdRequestAccessTokenGet(String bankId) throws ApiException {
        ApiResponse<AccessTokenResponse> resp = authBankIdRequestAccessTokenGetWithHttpInfo(bankId);
        return resp.getData();
    }

    /**
     * Generate access token for transfer operation
     * 
     * @param bankId Bank identifier (required)
     * @return ApiResponse&lt;AccessTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessTokenResponse> authBankIdRequestAccessTokenGetWithHttpInfo(String bankId) throws ApiException {
        com.squareup.okhttp.Call call = authBankIdRequestAccessTokenGetValidateBeforeCall(bankId, null, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate access token for transfer operation (asynchronously)
     * 
     * @param bankId Bank identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authBankIdRequestAccessTokenGetAsync(String bankId, final ApiCallback<AccessTokenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authBankIdRequestAccessTokenGetValidateBeforeCall(bankId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cardrefsInvoiceIdGetClientIdsPost
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cardrefsInvoiceIdGetClientIdsPostCall(String invoiceId, CardsIdsRequest performTransferRequestData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = performTransferRequestData;
        
        // create path and map variables
        String localVarPath = "/cardrefs/{invoiceId}/get-client-ids"
            .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cardrefsInvoiceIdGetClientIdsPostValidateBeforeCall(String invoiceId, CardsIdsRequest performTransferRequestData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling cardrefsInvoiceIdGetClientIdsPost(Async)");
        }
        
        // verify the required parameter 'performTransferRequestData' is set
        if (performTransferRequestData == null) {
            throw new ApiException("Missing the required parameter 'performTransferRequestData' when calling cardrefsInvoiceIdGetClientIdsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cardrefsInvoiceIdGetClientIdsPostCall(invoiceId, performTransferRequestData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch source and destination cards ids
     * 
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @return CardsIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardsIdsResponse cardrefsInvoiceIdGetClientIdsPost(String invoiceId, CardsIdsRequest performTransferRequestData) throws ApiException {
        ApiResponse<CardsIdsResponse> resp = cardrefsInvoiceIdGetClientIdsPostWithHttpInfo(invoiceId, performTransferRequestData);
        return resp.getData();
    }

    /**
     * Fetch source and destination cards ids
     * 
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @return ApiResponse&lt;CardsIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardsIdsResponse> cardrefsInvoiceIdGetClientIdsPostWithHttpInfo(String invoiceId, CardsIdsRequest performTransferRequestData) throws ApiException {
        com.squareup.okhttp.Call call = cardrefsInvoiceIdGetClientIdsPostValidateBeforeCall(invoiceId, performTransferRequestData, null, null);
        Type localVarReturnType = new TypeToken<CardsIdsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch source and destination cards ids (asynchronously)
     * 
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cardrefsInvoiceIdGetClientIdsPostAsync(String invoiceId, CardsIdsRequest performTransferRequestData, final ApiCallback<CardsIdsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cardrefsInvoiceIdGetClientIdsPostValidateBeforeCall(invoiceId, performTransferRequestData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardsIdsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configGetRatePost
     * @param sessionData Session info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configGetRatePostCall(RatesRequest sessionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sessionData;
        
        // create path and map variables
        String localVarPath = "/config/get-rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configGetRatePostValidateBeforeCall(RatesRequest sessionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionData' is set
        if (sessionData == null) {
            throw new ApiException("Missing the required parameter 'sessionData' when calling configGetRatePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configGetRatePostCall(sessionData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get transfer rates and limits configuration
     * 
     * @param sessionData Session info (required)
     * @return RatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RatesResponse configGetRatePost(RatesRequest sessionData) throws ApiException {
        ApiResponse<RatesResponse> resp = configGetRatePostWithHttpInfo(sessionData);
        return resp.getData();
    }

    /**
     * Get transfer rates and limits configuration
     * 
     * @param sessionData Session info (required)
     * @return ApiResponse&lt;RatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RatesResponse> configGetRatePostWithHttpInfo(RatesRequest sessionData) throws ApiException {
        com.squareup.okhttp.Call call = configGetRatePostValidateBeforeCall(sessionData, null, null);
        Type localVarReturnType = new TypeToken<RatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get transfer rates and limits configuration (asynchronously)
     * 
     * @param sessionData Session info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configGetRatePostAsync(RatesRequest sessionData, final ApiCallback<RatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configGetRatePostValidateBeforeCall(sessionData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for supportSendMessagePost
     * @param sendFeedbackRequest Transfer data to check (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call supportSendMessagePostCall(SendFeedbackRequest sendFeedbackRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sendFeedbackRequest;
        
        // create path and map variables
        String localVarPath = "/support/send-message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call supportSendMessagePostValidateBeforeCall(SendFeedbackRequest sendFeedbackRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sendFeedbackRequest' is set
        if (sendFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'sendFeedbackRequest' when calling supportSendMessagePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = supportSendMessagePostCall(sendFeedbackRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * send feedback to support
     * 
     * @param sendFeedbackRequest Transfer data to check (required)
     * @return SendFeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendFeedbackResponse supportSendMessagePost(SendFeedbackRequest sendFeedbackRequest) throws ApiException {
        ApiResponse<SendFeedbackResponse> resp = supportSendMessagePostWithHttpInfo(sendFeedbackRequest);
        return resp.getData();
    }

    /**
     * send feedback to support
     * 
     * @param sendFeedbackRequest Transfer data to check (required)
     * @return ApiResponse&lt;SendFeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendFeedbackResponse> supportSendMessagePostWithHttpInfo(SendFeedbackRequest sendFeedbackRequest) throws ApiException {
        com.squareup.okhttp.Call call = supportSendMessagePostValidateBeforeCall(sendFeedbackRequest, null, null);
        Type localVarReturnType = new TypeToken<SendFeedbackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * send feedback to support (asynchronously)
     * 
     * @param sendFeedbackRequest Transfer data to check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call supportSendMessagePostAsync(SendFeedbackRequest sendFeedbackRequest, final ApiCallback<SendFeedbackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = supportSendMessagePostValidateBeforeCall(sendFeedbackRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendFeedbackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferEndpointIdInvoiceIdPost
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferEndpointIdInvoiceIdPostCall(String endpointId, String invoiceId, PerformTransferRequest performTransferRequestData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = performTransferRequestData;
        
        // create path and map variables
        String localVarPath = "/transfer/{endpointId}/{invoiceId}"
            .replaceAll("\\{" + "endpointId" + "\\}", apiClient.escapeString(endpointId.toString()))
            .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferEndpointIdInvoiceIdPostValidateBeforeCall(String endpointId, String invoiceId, PerformTransferRequest performTransferRequestData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling transferEndpointIdInvoiceIdPost(Async)");
        }
        
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling transferEndpointIdInvoiceIdPost(Async)");
        }
        
        // verify the required parameter 'performTransferRequestData' is set
        if (performTransferRequestData == null) {
            throw new ApiException("Missing the required parameter 'performTransferRequestData' when calling transferEndpointIdInvoiceIdPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferEndpointIdInvoiceIdPostCall(endpointId, invoiceId, performTransferRequestData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform transfer request
     * 
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @return PerformTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PerformTransferResponse transferEndpointIdInvoiceIdPost(String endpointId, String invoiceId, PerformTransferRequest performTransferRequestData) throws ApiException {
        ApiResponse<PerformTransferResponse> resp = transferEndpointIdInvoiceIdPostWithHttpInfo(endpointId, invoiceId, performTransferRequestData);
        return resp.getData();
    }

    /**
     * Perform transfer request
     * 
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @return ApiResponse&lt;PerformTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PerformTransferResponse> transferEndpointIdInvoiceIdPostWithHttpInfo(String endpointId, String invoiceId, PerformTransferRequest performTransferRequestData) throws ApiException {
        com.squareup.okhttp.Call call = transferEndpointIdInvoiceIdPostValidateBeforeCall(endpointId, invoiceId, performTransferRequestData, null, null);
        Type localVarReturnType = new TypeToken<PerformTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform transfer request (asynchronously)
     * 
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param performTransferRequestData transfer data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferEndpointIdInvoiceIdPostAsync(String endpointId, String invoiceId, PerformTransferRequest performTransferRequestData, final ApiCallback<PerformTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferEndpointIdInvoiceIdPostValidateBeforeCall(endpointId, invoiceId, performTransferRequestData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferEndpointIdInvoiceIdStatusPost
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param transferStatusRequest Transfer data to check (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferEndpointIdInvoiceIdStatusPostCall(String endpointId, String invoiceId, TransferStatusRequest transferStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transferStatusRequest;
        
        // create path and map variables
        String localVarPath = "/transfer/{endpointId}/{invoiceId}/status"
            .replaceAll("\\{" + "endpointId" + "\\}", apiClient.escapeString(endpointId.toString()))
            .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferEndpointIdInvoiceIdStatusPostValidateBeforeCall(String endpointId, String invoiceId, TransferStatusRequest transferStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling transferEndpointIdInvoiceIdStatusPost(Async)");
        }
        
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling transferEndpointIdInvoiceIdStatusPost(Async)");
        }
        
        // verify the required parameter 'transferStatusRequest' is set
        if (transferStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'transferStatusRequest' when calling transferEndpointIdInvoiceIdStatusPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferEndpointIdInvoiceIdStatusPostCall(endpointId, invoiceId, transferStatusRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get funds transfer status
     * 
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param transferStatusRequest Transfer data to check (required)
     * @return TransferStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransferStatusResponse transferEndpointIdInvoiceIdStatusPost(String endpointId, String invoiceId, TransferStatusRequest transferStatusRequest) throws ApiException {
        ApiResponse<TransferStatusResponse> resp = transferEndpointIdInvoiceIdStatusPostWithHttpInfo(endpointId, invoiceId, transferStatusRequest);
        return resp.getData();
    }

    /**
     * Get funds transfer status
     * 
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param transferStatusRequest Transfer data to check (required)
     * @return ApiResponse&lt;TransferStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransferStatusResponse> transferEndpointIdInvoiceIdStatusPostWithHttpInfo(String endpointId, String invoiceId, TransferStatusRequest transferStatusRequest) throws ApiException {
        com.squareup.okhttp.Call call = transferEndpointIdInvoiceIdStatusPostValidateBeforeCall(endpointId, invoiceId, transferStatusRequest, null, null);
        Type localVarReturnType = new TypeToken<TransferStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get funds transfer status (asynchronously)
     * 
     * @param endpointId Entry point identifier for transfer transaction (required)
     * @param invoiceId Transfer transaction identifier (required)
     * @param transferStatusRequest Transfer data to check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferEndpointIdInvoiceIdStatusPostAsync(String endpointId, String invoiceId, TransferStatusRequest transferStatusRequest, final ApiCallback<TransferStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferEndpointIdInvoiceIdStatusPostValidateBeforeCall(endpointId, invoiceId, transferStatusRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransferStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferInitiateTransferPost
     * @param initiateTransferData Device info, location data, session info, amount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferInitiateTransferPostCall(InitiateTransferRequest initiateTransferData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = initiateTransferData;
        
        // create path and map variables
        String localVarPath = "/transfer/initiate-transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferInitiateTransferPostValidateBeforeCall(InitiateTransferRequest initiateTransferData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'initiateTransferData' is set
        if (initiateTransferData == null) {
            throw new ApiException("Missing the required parameter 'initiateTransferData' when calling transferInitiateTransferPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferInitiateTransferPostCall(initiateTransferData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Initiate transfer request
     * 
     * @param initiateTransferData Device info, location data, session info, amount (required)
     * @return InitiateTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InitiateTransferResponse transferInitiateTransferPost(InitiateTransferRequest initiateTransferData) throws ApiException {
        ApiResponse<InitiateTransferResponse> resp = transferInitiateTransferPostWithHttpInfo(initiateTransferData);
        return resp.getData();
    }

    /**
     * Initiate transfer request
     * 
     * @param initiateTransferData Device info, location data, session info, amount (required)
     * @return ApiResponse&lt;InitiateTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InitiateTransferResponse> transferInitiateTransferPostWithHttpInfo(InitiateTransferRequest initiateTransferData) throws ApiException {
        com.squareup.okhttp.Call call = transferInitiateTransferPostValidateBeforeCall(initiateTransferData, null, null);
        Type localVarReturnType = new TypeToken<InitiateTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate transfer request (asynchronously)
     * 
     * @param initiateTransferData Device info, location data, session info, amount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferInitiateTransferPostAsync(InitiateTransferRequest initiateTransferData, final ApiCallback<InitiateTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferInitiateTransferPostValidateBeforeCall(initiateTransferData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InitiateTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
